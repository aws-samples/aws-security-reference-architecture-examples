########################################################################
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
########################################################################
AWSTemplateFormatVersion: '2010-09-09'
Description: Test to see if a resource exists

Parameters:
  # pCommonPrerequisitesInstalled:
  #   AllowedValues: ['true', 'false']
  #   Default: 'false'
  #   Description:
  #     Indicates whether or not the AWS SRA common prerequisites solution is already installed (true or false).
  #   Type: String

  pCheckForResourceLambdaFunctionName:
    AllowedPattern: '^[\w-]{1,64}$'
    ConstraintDescription: Max 64 alphanumeric characters. Also special characters supported [_, -]
    Default: sra-check-for-resource-lambda
    Description: Lambda function name for starting the code build project
    Type: String
  pSRASolutionName:
    AllowedValues: [sra-common-prerequisites]
    Default: sra-common-prerequisites
    Description: The SRA solution name. The default value is the folder name of the solution
    Type: String
  pLambdaLogGroupKmsKey:
    AllowedPattern: '^$|^arn:(aws[a-zA-Z-]*){1}:kms:[a-z0-9-]+:\d{12}:key\/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$'
    ConstraintDescription: 'Key ARN example:  arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab'
    Default: ''
    Description:
      (Optional) KMS Key ARN to use for encrypting the Lambda logs data. If empty, encryption is enabled with CloudWatch Logs managing the server-side
      encryption keys.
    Type: String
  pLambdaLogGroupRetention:
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Default: 14
    Description: Specifies the number of days you want to retain log events
    Type: String
  pLambdaLogLevel:
    AllowedValues: [INFO, ERROR, DEBUG]
    Default: INFO
    Description: Lambda Function Logging Level
    Type: String
  pCheckForResourceLambdaRoleName:
    AllowedPattern: '^[\w+=,.@-]{1,64}$'
    ConstraintDescription: Max 64 alphanumeric characters. Also special characters supported [+, =, ., @, -].
    Default: sra-check-for-resource-lambda-role
    Description: Lambda execution role for checking to see if a resource exists
    Type: String
  pRandomParameter:
    Default: "1"
    Description: Random parameter
    Type: String

  pCISStandardVersion:
    AllowedValues: [1.2.0, 1.4.0]
    Default: 1.4.0
    Description: CIS Standard Version
    Type: String
  pComplianceFrequency:
    ConstraintDescription: Compliance Frequency must be a number between 1 and 30, inclusive.
    Default: 7
    Description: Frequency (in days between 1 and 30, default is 7) to check organizational compliance
    MinValue: 1
    MaxValue: 30
    Type: Number
  pCreateLambdaLogGroup:
    AllowedValues: ['Yes', 'No']
    Default: 'No'
    Description:
      Indicates whether a CloudWatch Log Group should be explicitly created for the Lambda function, to allow for setting a Log Retention and/or KMS
      Key for encryption.
    Type: String

  pDisableSecurityHub:
    AllowedValues: ['Yes', 'No']
    Default: 'No'
    Description: Disable the Security Hub solution in all accounts and regions before deleting the stack.
    Type: String
  pEnableCISStandard:
    AllowedValues: ['true', 'false']
    Default: 'false'
    Description: Indicates whether to enable the CIS AWS Foundations Benchmark Standard.
    Type: String
  pEnablePCIStandard:
    AllowedValues: ['true', 'false']
    Default: 'false'
    Description: Indicates whether to enable the Payment Card Industry Data Security Standard (PCI DSS).
    Type: String
  pEnableSecurityBestPracticesStandard:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Indicates whether to enable the AWS Foundational Security Best Practices Standard.
    Type: String
  pRegionLinkingMode:
    AllowedValues: [SPECIFIED_REGIONS, ALL_REGIONS]
    Default: SPECIFIED_REGIONS
    Description:
      Indicates whether to aggregate findings from all of the available Regions in the current partition. Also determines whether to automatically
      aggregate findings from new Regions as Security Hub supports them and you opt into them.
    Type: String
  pSRAAlarmEmail:
    Description: (Optional) Email address for receiving SRA alarms
    Type: String
  pEnableNISTStandard:
    AllowedValues: ['true', 'false']
    Default: 'false'
    Description: Indicates whether to enable the National Institute of Standards and Technology (NIST) SP 800-53 Rev. 5.
    Type: String
  pNISTStandardVersion:
    AllowedValues: [5.0.0]
    Default: 5.0.0
    Description: NIST Standard Version
    Type: String

Conditions:
  cUsingKmsKey: !Not [!Equals [!Ref pLambdaLogGroupKmsKey, '']]
  cUseGraviton: !Or
    - !Equals [!Ref 'AWS::Region', ap-northeast-1]
    - !Equals [!Ref 'AWS::Region', ap-south-1]
    - !Equals [!Ref 'AWS::Region', ap-southeast-1]
    - !Equals [!Ref 'AWS::Region', ap-southeast-2]
    - !Equals [!Ref 'AWS::Region', eu-central-1]
    - !Equals [!Ref 'AWS::Region', eu-west-1]
    - !Equals [!Ref 'AWS::Region', eu-west-2]
    - !Equals [!Ref 'AWS::Region', us-east-1]
    - !Equals [!Ref 'AWS::Region', us-east-2]
    - !Equals [!Ref 'AWS::Region', us-west-2]
  cCreateLambdaLogGroup: !Equals [!Ref pCreateLambdaLogGroup, 'Yes']
  cDisableSecurityHub: !Equals [!Ref pDisableSecurityHub, 'Yes']

Resources:
  rCheckForResourceCustomResource:
    Type: Custom::LambdaCustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt rCheckForResourceLambdaFunction.Arn
      pRandomParameter: !Ref pRandomParameter

  rCheckForResourceLambdaFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Lambda role provides access to CloudWatch Logs
          - id: W89
            reason: Lambda does not need to communicate with VPC resources.
          - id: W92
            reason: Lambda does not need reserved concurrent executions.
      checkov:
        skip:
          - id: CKV_AWS_115
            comment: Lambda does not need reserved concurrent executions.
          - id: CKV_AWS_116
            comment: DLQ not needed, as Lambda function only triggered by CloudFormation events.
          - id: CKV_AWS_117
            comment: Lambda does not need to communicate with VPC resources.
          - id: CKV_AWS_173
            comment: Environment variables are not sensitive.
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref pCheckForResourceLambdaFunctionName
      Description: Check to see if a resource exists
      Architectures: !If
        - cUseGraviton
        - [arm64]
        - !Ref AWS::NoValue
      Handler: index.lambda_handler
      Role: !GetAtt rCheckForResourceLambdaRole.Arn
      Runtime: python3.9
      Timeout: 900
      Environment:
        Variables:
          LOG_LEVEL: !Ref pLambdaLogLevel
      Tags:
        - Key: sra-solution
          Value: !Ref pSRASolutionName
      Code:
        ZipFile: |
          # type: ignore
          """Custom Resource to check to see if a resource exists.

          Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
          SPDX-License-Identifier: MIT-0
          """
          import logging
          import os

          import boto3
          import re
          import cfnresponse

          # import time
          # from botocore.exceptions import ClientError

          LOGGER = logging.getLogger(__name__)
          log_level: str = os.environ.get("LOG_LEVEL", "ERROR")
          LOGGER.setLevel(log_level)


          def list_stacks(cfn_client):
              LOGGER.info("list_stacks function...")
              # 'CREATE_IN_PROGRESS'|'CREATE_FAILED'|'CREATE_COMPLETE'|'ROLLBACK_IN_PROGRESS'|'ROLLBACK_FAILED'|'ROLLBACK_COMPLETE'|'DELETE_IN_PROGRESS'|'DELETE_FAILED'|'DELETE_COMPLETE'|'UPDATE_IN_PROGRESS'|'UPDATE_COMPLETE_CLEANUP_IN_PROGRESS'|'UPDATE_COMPLETE'|'UPDATE_FAILED'|'UPDATE_ROLLBACK_IN_PROGRESS'|'UPDATE_ROLLBACK_FAILED'|'UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS'|'UPDATE_ROLLBACK_COMPLETE'|'REVIEW_IN_PROGRESS'|'IMPORT_IN_PROGRESS'|'IMPORT_COMPLETE'|'IMPORT_ROLLBACK_IN_PROGRESS'|'IMPORT_ROLLBACK_FAILED'|'IMPORT_ROLLBACK_COMPLETE',
              return cfn_client.list_stacks(
                  StackStatusFilter=[
                      "CREATE_IN_PROGRESS",
                      "CREATE_FAILED",
                      "CREATE_COMPLETE",
                      "UPDATE_IN_PROGRESS",
                      "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS",
                      "UPDATE_COMPLETE",
                      "REVIEW_IN_PROGRESS",
                      "IMPORT_IN_PROGRESS",
                      "IMPORT_COMPLETE",
                  ]
              )


          def show_stack_resources(stackname, cfn_client):
              return cfn_client.describe_stack_resources(StackName=stackname)


          def find_common_prerequisite_stack():
              LOGGER.info("find_common_prerequisite_stack function...")
              cfn_client = boto3.client("cloudformation")
              for stack in list_stacks(cfn_client)["StackSummaries"]:
                  if (
                      re.match(r".*common-prerequisites-main$", stack["StackName"])
                      or re.match(r".*common-prerequisites-main-ssm$", stack["StackName"])
                      or re.match(r".*CommonPrerequisitesMain-.{13}$", stack["StackName"])
                      or re.match(r".*CommonPrerequisitesMainSsm-.{13}$", stack["StackName"])
                  ):
                      LOGGER.info(f"StackName: {stack['StackName']}| StackStatus: {stack['StackStatus']}")
                      if re.match(r".*sra-1ssgnse2h.*", stack["TemplateDescription"]):
                          return {
                              "sra-common-prerequisites-installed": "true",
                              "sra-common-prerequisite-stack-name": stack["StackName"],
                              "sra-common-prerequisite-stack-status": stack["StackStatus"],
                          }
              return {
                  "sra-common-prerequisites-installed": "false",
                  "sra-common-prerequisite-stack-name": "no_stack",
                  "sra-common-prerequisite-stack-status": "not_deployed",
              }


          def create_event(event, context):
              try:
                  data = find_common_prerequisite_stack()
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, data, "CheckForResourceID")
              except Exception:
                  LOGGER.exception("Unexpected!")
                  reason = f"See the details in CloudWatch Log Stream: '{context.log_group_name}'"
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, "CheckForResourceID", reason=reason)
              return "CustomResourcePhysicalID"


          def update_event(event, context):
              LOGGER.info("update event function")
              try:
                  data = find_common_prerequisite_stack()
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, data, "CheckForResourceID")
              except Exception:
                  LOGGER.exception("Unexpected!")
                  reason = f"See the details in CloudWatch Log Stream: '{context.log_group_name}'"
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, "CheckForResourceID", reason=reason)


          def delete_event(event, context):
              LOGGER.info("delete event function")
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"delete_operation": "succeeded deleting"}, "CheckForResourceID")


          def lambda_handler(event, context):
              LOGGER.info(event)
              if event["RequestType"] == "Create":
                  LOGGER.info("CREATE EVENT!!")
                  create_event(event, context)
              if event["RequestType"] == "Update":
                  LOGGER.info("UPDATE EVENT!!")
                  update_event(event, context)
              if event["RequestType"] == "Delete":
                  LOGGER.info("DELETE EVENT!!")
                  delete_event(event, context)

  
  rCheckForResourceLambdaLogGroup:
    DeletionPolicy: Retain
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${pCheckForResourceLambdaFunctionName}
      KmsKeyId: !If
        - cUsingKmsKey
        - !Ref pLambdaLogGroupKmsKey
        - !Ref AWS::NoValue
      RetentionInDays: !Ref pLambdaLogGroupRetention

  rCheckForResourceLambdaRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Allow * in resource when required
          - id: W28
            reason: The role name is defined to identify automation resources
    Properties:
      RoleName: !Ref pCheckForResourceLambdaRoleName
      Description: !Sub Role for '${pCheckForResourceLambdaRoleName}' Lambda function
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: cloudformation-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: cloudformationaccess
                Effect: Allow
                Action: 
                  - cloudformation:ListStacks
                  - cloudformation:*
                Resource: '*'
        - PolicyName: CloudWatchLogGroup-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${pCheckForResourceLambdaFunctionName}:log-stream:*
      # # TODO(liamschn): temp permissions for development purposes
      # ManagedPolicyArns:
      #   - 'arn:aws:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: sra-solution
          Value: !Ref pSRASolutionName

  rSecurityHubSolutionStack:
    Type: AWS::CloudFormation::Stack
    # DependsOn: WaitCondition
    # DependsOn: rCommonPrerequisitesMainSsm
    # DependsOn: !If [cCommonPrerequisitesInstalled, !Ref pCommonPrerequisitesInstalled, rCommonPrerequisitesMainSsm]
    # Condition: cDeploySecurityHubSolution
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      # TemplateURL: !Sub https://${pSRAStagingS3BucketNamePrefix}-${AWS::AccountId}-${AWS::Region}.s3.${AWS::Region}.${AWS::URLSuffix}/sra-securityhub-org/templates/sra-securityhub-org-main-ssm.yaml
      # TemplateURL: !Sub https://sra-easy-setup-787598777837-us-west-2.s3.${AWS::Region}.${AWS::URLSuffix}/securityhub-org-solution.yaml
      # TemplateURL: https://sra-easy-setup-787598777837-us-west-2.s3.us-west-2.amazonaws.com/securityhub-org-solution.yaml
      TemplateURL: https://sra-testing-027168085584-us-west-2.s3.us-west-2.amazonaws.com/securityhub-org-solution.yaml
      Parameters:
        # pAuditAccountId: !Ref pAuditAccountId
        pCISStandardVersion: !Ref pCISStandardVersion
        pComplianceFrequency: !Ref pComplianceFrequency
        # pControlTowerRegionsOnly: !Ref pControlTowerRegionsOnly
        pCreateLambdaLogGroup: !Ref pCreateLambdaLogGroup
        # pDisableSecurityHub: !If [cDisableSecurityHub, "Yes", "No"]
        pDisableSecurityHub: !Ref pDisableSecurityHub
        pEnableCISStandard: !Ref pEnableCISStandard
        # pEnabledRegions: !Ref pEnabledRegions
        pEnablePCIStandard: !Ref pEnablePCIStandard
        pEnableSecurityBestPracticesStandard: !Ref pEnableSecurityBestPracticesStandard
        pLambdaLogGroupKmsKey: !Ref pLambdaLogGroupKmsKey
        pLambdaLogGroupRetention: !Ref pLambdaLogGroupRetention
        pLambdaLogLevel: !Ref pLambdaLogLevel
        # pOrganizationId: !Ref pOrganizationId
        pRegionLinkingMode: !Ref pRegionLinkingMode
        # pRootOrganizationalUnitId: !Ref pRootOrganizationalUnitId
        # pSourceStackName: !If [cDeployConfigManagementSolution, !Ref rConfigManagementSolutionStack, '']
        pSRAAlarmEmail: !Ref pSRAAlarmEmail
        # pSRAStagingS3BucketName: !Ref pSRAStagingS3BucketName
        pEnableNISTStandard: !Ref pEnableNISTStandard
        pNISTStandardVersion: !Ref pNISTStandardVersion
        pCommonPrerequisitesInstalled: !GetAtt rCheckForResourceCustomResource.sra-common-prerequisites-installed

Outputs:
  oSraCommonPrerequisitesInstalled:
    Description: SRA common prerequisites solution installed true or false
    Value: !GetAtt rCheckForResourceCustomResource.sra-common-prerequisites-installed
    Export:
      Name: eSraCommonPrerequisitesInstalled
  oSraCommonPrerequisitesStackName:
    Description: SRA common prerequisites solution CloudFormation stack name
    Value: !GetAtt rCheckForResourceCustomResource.sra-common-prerequisite-stack-name
    Export:
      Name: eSraCommonPrerequisitesStackName
  oSraCommonPrerequisitesStackStatus:
    Description: SRA common prerequisites solution CloudFormation stack status
    Value: !GetAtt rCheckForResourceCustomResource.sra-common-prerequisite-stack-status
    Export:
      Name: eSraCommonPrerequisitesStackStatus