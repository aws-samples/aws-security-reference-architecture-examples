########################################################################
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
########################################################################
AWSTemplateFormatVersion: '2010-09-09'
Description: Installs the AWS SRA GuardDuty solution.  Will check to see if AWS SRA common prerequsites is already deployed and will deploy it if needed.

Parameters:
  pSRAHelperBucketNamePrefix:
    AllowedValues: [sra-helper]
    Default: sra-helper
    Description:
      SRA helper S3 bucket name prefix
    Type: String
  pCodeBuildProjectName:
    AllowedValues: [sra-helper-guardduty-codebuild-project]
    Default: sra-helper-guardduty-codebuild-project
    Description:
      SRA CodeBuild project name
    Type: String
  pTemplateURL:
    Default: https://raw.githubusercontent.com/liamschn/aws-security-reference-architecture-examples/abi-sra/aws_sra_examples/modules/guardduty-org-module/templates/sra-guardduty-org-solution.yaml
    Description:
      SRA module solution template URL
    Type: String
  pCodeBuildProjectLambdaFunctionName:
    AllowedPattern: '^[\w-]{1,64}$'
    ConstraintDescription: Max 64 alphanumeric characters. Also special characters supported [_, -]
    Default: sra-helper-guardduty-codebuild-project-lambda
    Description: Lambda function name for starting the code build project
    Type: String
  pCodeBuildRoleName:
    AllowedValues: [sra-helper-guardduty-codebuild-role]
    Default: sra-helper-guardduty-codebuild-role
    Description:
      SRA CodeBuild role name
    Type: String
  pCodeBuildProjectLambdaRoleName:
    AllowedPattern: '^[\w+=,.@-]{1,64}$'
    ConstraintDescription: Max 64 alphanumeric characters. Also special characters supported [+, =, ., @, -].
    Default: sra-helper-guardduty-codebuild-lambda-role
    Description: Lambda execution role for starting the code build project
    Type: String
  pCheckForResourceLambdaFunctionName:
    AllowedPattern: '^[\w-]{1,64}$'
    ConstraintDescription: Max 64 alphanumeric characters. Also special characters supported [_, -]
    Default: sra-helper-guardduty-lambda
    Description: Lambda function name for starting the code build project
    Type: String
  pSRASolutionName:
    AllowedValues: [sra-common-prerequisites]
    Default: sra-common-prerequisites
    Description: The SRA solution name. The default value is the folder name of the solution
    Type: String
  pLambdaLogGroupKmsKey:
    AllowedPattern: '^$|^arn:(aws[a-zA-Z-]*){1}:kms:[a-z0-9-]+:\d{12}:key\/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$'
    ConstraintDescription: 'Key ARN example:  arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab'
    Default: ''
    Description:
      (Optional) KMS Key ARN to use for encrypting the Lambda logs data. If empty, encryption is enabled with CloudWatch Logs managing the server-side
      encryption keys.
    Type: String
  pLambdaLogGroupRetention:
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Default: 14
    Description: Specifies the number of days you want to retain log events
    Type: String
  pLambdaLogLevel:
    AllowedValues: [INFO, ERROR, DEBUG]
    Default: INFO
    Description: Lambda Function Logging Level
    Type: String
  pCheckForResourceLambdaRoleName:
    AllowedPattern: '^[\w+=,.@-]{1,64}$'
    ConstraintDescription: Max 64 alphanumeric characters. Also special characters supported [+, =, ., @, -].
    Default: sra-helper-guardduty-lambda-role
    Description: Lambda execution role for checking to see if a resource exists
    Type: String
  pRandomParameter:
    Default: "1"
    Description: Random parameter
    Type: String


  pCreateLambdaLogGroup:
    AllowedValues: ['Yes', 'No']
    Default: 'No'
    Description:
      Indicates whether a CloudWatch Log Group should be explicitly created for the Lambda function, to allow for setting a Log Retention and/or KMS
      Key for encryption.
    Type: String

  pDisableGuardDuty:
    AllowedValues: ['Yes', 'No']
    Default: 'No'
    Description: Disable the GuardDuty solution in all accounts and regions before deleting the stack.
    Type: String
  pAutoEnableS3Logs:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Auto enable S3 logs
    Type: String
  pAutoEnableKubernetesAuditLogs:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Auto enable Kubernetes Audit Logs
    Type: String
  pAutoEnableMalwareProtection:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Auto enable Malware Protection
    Type: String
  pEnableRdsLoginEvents:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Auto enable RDS Login Events
    Type: String   
  pEnableEksRuntimeMonitoring:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Auto enable EKS Runtime Monitoring
    Type: String   
  pEnableEksAddonManagement:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Auto enable EKS Add-on Management
    Type: String
  pEnableLambdaNetworkLogs:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Auto enable Lambda Network Logs
    Type: String
  pGuardDutyFindingPublishingFrequency:
    AllowedValues: [FIFTEEN_MINUTES, ONE_HOUR, SIX_HOURS]
    Default: FIFTEEN_MINUTES
    Description: Finding publishing frequency
    Type: String
  pGuardDutyOrgDeliveryBucketPrefix:
    AllowedPattern: '^$|^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription:
      S3 bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: sra-guardduty-org-delivery
    Description:
      GuardDuty Delivery S3 bucket prefix. The account and region will get added to the end. e.g. sra-guardduty-delivery-123456789012-us-east-1
    Type: String
  pGuardDutyOrgDeliveryKeyAlias:
    Default: sra-guardduty-org-delivery-key
    Description: GuardDuty Delivery KMS Key Alias
    Type: String
  pSRAAlarmEmail:
    Description: (Optional) Email address for receiving SRA alarms
    Type: String

Conditions:
  cUsingKmsKey: !Not [!Equals [!Ref pLambdaLogGroupKmsKey, '']]
  cUseGraviton: !Or
    - !Equals [!Ref 'AWS::Region', ap-northeast-1]
    - !Equals [!Ref 'AWS::Region', ap-south-1]
    - !Equals [!Ref 'AWS::Region', ap-southeast-1]
    - !Equals [!Ref 'AWS::Region', ap-southeast-2]
    - !Equals [!Ref 'AWS::Region', eu-central-1]
    - !Equals [!Ref 'AWS::Region', eu-west-1]
    - !Equals [!Ref 'AWS::Region', eu-west-2]
    - !Equals [!Ref 'AWS::Region', us-east-1]
    - !Equals [!Ref 'AWS::Region', us-east-2]
    - !Equals [!Ref 'AWS::Region', us-west-2]
  # cCreateLambdaLogGroup: !Equals [!Ref pCreateLambdaLogGroup, 'Yes']
  # cDisableGuardDuty: !Equals [!Ref pDisableGuardDuty, 'Yes']

Resources:
  rCheckForResourceCustomResource:
    Type: Custom::LambdaCustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt rCheckForResourceLambdaFunction.Arn
      pRandomParameter: !Ref pRandomParameter

  rCheckForResourceLambdaFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Lambda role provides access to CloudWatch Logs
          - id: W89
            reason: Lambda does not need to communicate with VPC resources.
          - id: W92
            reason: Lambda does not need reserved concurrent executions.
      checkov:
        skip:
          - id: CKV_AWS_115
            comment: Lambda does not need reserved concurrent executions.
          - id: CKV_AWS_116
            comment: DLQ not needed, as Lambda function only triggered by CloudFormation events.
          - id: CKV_AWS_117
            comment: Lambda does not need to communicate with VPC resources.
          - id: CKV_AWS_173
            comment: Environment variables are not sensitive.
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref pCheckForResourceLambdaFunctionName
      Description: Check to see if a resource exists
      Architectures: !If
        - cUseGraviton
        - [arm64]
        - !Ref AWS::NoValue
      Handler: index.lambda_handler
      Role: !GetAtt rCheckForResourceLambdaRole.Arn
      Runtime: python3.9
      Timeout: 900
      Environment:
        Variables:
          LOG_LEVEL: !Ref pLambdaLogLevel
          SRA_HELPER_BUCKET_NAME: !Sub "${pSRAHelperBucketNamePrefix}-${AWS::AccountId}-${AWS::Region}"
      Tags:
        - Key: sra-solution
          Value: !Ref pSRASolutionName
      Code:
        ZipFile: |
          # type: ignore
          """Custom Resource to check to see if a resource exists.

          Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
          SPDX-License-Identifier: MIT-0
          """
          import logging
          import os

          import boto3
          import re
          import cfnresponse
          from botocore.client import ClientError

          S3_CLIENT = boto3.client("s3")
          S3_RESOURCE = boto3.resource("s3")

          LOGGER = logging.getLogger(__name__)
          log_level: str = os.environ.get("LOG_LEVEL", "ERROR")
          LOGGER.setLevel(log_level)
          HELPER_BUCKET: str = os.environ.get("SRA_HELPER_BUCKET_NAME")
          REGION: str = os.environ.get("AWS_REGION")


          def query_for_s3_bucket():
              try:
                  S3_RESOURCE.meta.client.head_bucket(Bucket=HELPER_BUCKET)
                  return True
              except ClientError:
                  return False


          def create_helper_bucket():
              create_bucket = S3_CLIENT.create_bucket(
                  ACL="private", Bucket=HELPER_BUCKET, CreateBucketConfiguration={"LocationConstraint": REGION}, ObjectOwnership="BucketOwnerPreferred"
              )
              LOGGER.info(f"Bucket created: {create_bucket}")


          def list_stacks(cfn_client):
              LOGGER.info("list_stacks function...")
              # 'CREATE_IN_PROGRESS'|'CREATE_FAILED'|'CREATE_COMPLETE'|'ROLLBACK_IN_PROGRESS'|'ROLLBACK_FAILED'|'ROLLBACK_COMPLETE'|'DELETE_IN_PROGRESS'|'DELETE_FAILED'|'DELETE_COMPLETE'|'UPDATE_IN_PROGRESS'|'UPDATE_COMPLETE_CLEANUP_IN_PROGRESS'|'UPDATE_COMPLETE'|'UPDATE_FAILED'|'UPDATE_ROLLBACK_IN_PROGRESS'|'UPDATE_ROLLBACK_FAILED'|'UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS'|'UPDATE_ROLLBACK_COMPLETE'|'REVIEW_IN_PROGRESS'|'IMPORT_IN_PROGRESS'|'IMPORT_COMPLETE'|'IMPORT_ROLLBACK_IN_PROGRESS'|'IMPORT_ROLLBACK_FAILED'|'IMPORT_ROLLBACK_COMPLETE',
              return cfn_client.list_stacks(
                  StackStatusFilter=[
                      "CREATE_IN_PROGRESS",
                      "CREATE_FAILED",
                      "CREATE_COMPLETE",
                      "UPDATE_IN_PROGRESS",
                      "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS",
                      "UPDATE_COMPLETE",
                      "REVIEW_IN_PROGRESS",
                      "IMPORT_IN_PROGRESS",
                      "IMPORT_COMPLETE",
                  ]
              )


          def show_stack_resources(stackname, cfn_client):
              return cfn_client.describe_stack_resources(StackName=stackname)


          def find_common_prerequisite_stack():
              LOGGER.info("find_common_prerequisite_stack function...")
              LOGGER.info("checking for helper bucket...")
              if query_for_s3_bucket() is False:
                  LOGGER.info("helper bucket not found, creating...")
                  create_helper_bucket()
              cfn_client = boto3.client("cloudformation")
              for stack in list_stacks(cfn_client)["StackSummaries"]:
                  if (
                      re.match(r".*common-prerequisites-main$", stack["StackName"])
                      or re.match(r".*common-prerequisites-main-ssm$", stack["StackName"])
                      or re.match(r".*CommonPrerequisitesMain-.{13}$", stack["StackName"])
                      or re.match(r".*CommonPrerequisitesMainSsm-.{13}$", stack["StackName"])
                  ):
                      LOGGER.info(f"StackName: {stack['StackName']}| StackStatus: {stack['StackStatus']}")
                      if re.match(r".*sra-1ssgnse2h.*", stack["TemplateDescription"]):
                          return {
                              "sra-common-prerequisites-installed": "true",
                              "sra-common-prerequisite-stack-name": stack["StackName"],
                              "sra-common-prerequisite-stack-status": stack["StackStatus"],
                          }
              return {
                  "sra-common-prerequisites-installed": "false",
                  "sra-common-prerequisite-stack-name": "no_stack",
                  "sra-common-prerequisite-stack-status": "not_deployed",
              }


          def create_event(event, context):
              data = find_common_prerequisite_stack()
              cfnresponse.send(event, context, cfnresponse.SUCCESS, data, "CheckForResourceID")
              return "CustomResourcePhysicalID"


          def update_event(event, context):
              LOGGER.info("update event function")
              data = find_common_prerequisite_stack()
              cfnresponse.send(event, context, cfnresponse.SUCCESS, data, "CheckForResourceID")


          def delete_event(event, context):
              LOGGER.info("delete event function")
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"delete_operation": "succeeded deleting"}, "CheckForResourceID")


          def lambda_handler(event, context):
              LOGGER.info(event)
              try:
                  if event["RequestType"] == "Create":
                      LOGGER.info("CREATE EVENT!!")
                      create_event(event, context)
                  if event["RequestType"] == "Update":
                      LOGGER.info("UPDATE EVENT!!")
                      update_event(event, context)
                  if event["RequestType"] == "Delete":
                      LOGGER.info("DELETE EVENT!!")
                      delete_event(event, context)
              except Exception:
                  LOGGER.exception("Unexpected!")
                  reason = f"See the details in CloudWatch Log Stream: '{context.log_group_name}'"
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, "CheckForResourceID", reason=reason)

  rCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${pCodeBuildProjectName}'
      Artifacts:
        Type: NO_ARTIFACTS
      Description: "Codebuild project to get SRA code from github"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref "AWS::AccountId"
          - Name: SRA_HELPER_S3_BUCKET_NAME
            Value: !Sub "${pSRAHelperBucketNamePrefix}-${AWS::AccountId}-${AWS::Region}"
          - Name: SRA_MODULE_TEMPLATE_URL
            Value: !Ref pTemplateURL
        Image: "aws/codebuild/standard:5.0"
        PrivilegedMode: true
        Type: "LINUX_CONTAINER"
      ServiceRole: !GetAtt rCodeBuildRole.Arn
      TimeoutInMinutes: 120
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Build started on `date`...
            build:
              commands:
                - echo Build started on `date` in ${AWS::Region} region
                - echo Downloading Security Hub module solution template from $SRA_MODULE_TEMPLATE_URL...
                - curl -LJO $SRA_MODULE_TEMPLATE_URL
                - echo Listing current directory...
                - ls
                - echo Showing current caller identity...
                - aws sts get-caller-identity
                - echo Uploading to $SRA_MODULE_TEMPLATE_URL SRA helper S3 bucket...
                - aws s3 cp ./sra-guardduty-org-solution.yaml s3://$SRA_HELPER_S3_BUCKET_NAME/modules/guardduty-org/sra-guardduty-org-solution.yaml
            post_build:
              commands:
                - echo Build completed on `date`

  rCodeBuildRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Allow * in resource when required
          - id: W28
            reason: The role name is defined to identify automation resources
    Properties:
      RoleName: !Sub '${pCodeBuildRoleName}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "logs-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
        - PolicyName: "IAM-Access-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:PassRole
                  - iam:GetRolePolicy
                  - iam:PutRolePolicy
                  - iam:CreateRole
                  - iam:DeleteRolePolicy
                  - iam:DeleteRole
                  - iam:TagRole
                Resource:
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/sra*"
        - PolicyName: "lambda-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:GetFunction
                  - lambda:GetFunctionCodeSigningConfig
                  - lambda:GetRuntimeManagementConfig
                  - lambda:CreateFunction
                  - lambda:DeleteFunction
                  - lambda:TagResource
                  - lambda:InvokeFunction
                Resource:
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:sra*"
        - PolicyName: "s3-helper-bucket-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:GetBucketAcl
                  - s3:GetBucketPolicy
                  - s3:DeleteBucket
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${pSRAHelperBucketNamePrefix}-${AWS::AccountId}-${AWS::Region}"
                  - !Sub "arn:${AWS::Partition}:s3:::${pSRAHelperBucketNamePrefix}-${AWS::AccountId}-${AWS::Region}/*"
        - PolicyName: "s3-create-bucket-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:PutBucketPolicy
                  - s3:PutBucketTagging
                  - s3:PutBucketPublicAccessBlock
                  - s3:GetEncryptionConfiguration
                  - s3:PutEncryptionConfiguration
                  - s3:PutBucketOwnershipControls
                  - s3:CreateBucket
                  - s3:PutBucketAcl
                  - s3:PutBucketObjectLockConfiguration
                  - s3:PutBucketVersioning
                  - s3:SetBucketEncryption
                  - s3:PutBucketEncryption
                Resource: 
                  - "arn:aws:s3:::*"
        - PolicyName: "ssm-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                  - ssm:AddTagsToResource
                Resource:
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sra*"

  rStartCodeBuildProjectCustomResource:
    DependsOn:
      - rCodeBuildProject
      - rCheckForResourceCustomResource
    Type: Custom::LambdaCustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt rStartCodeBuildProjectLambdaFunction.Arn

  rStartCodeBuildProjectLambdaFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Lambda role provides access to CloudWatch Logs
          - id: W89
            reason: Lambda does not need to communicate with VPC resources.
          - id: W92
            reason: Lambda does not need reserved concurrent executions.
      checkov:
        skip:
          - id: CKV_AWS_115
            comment: Lambda does not need reserved concurrent executions.
          - id: CKV_AWS_116
            comment: DLQ not needed, as Lambda function only triggered by CloudFormation events.
          - id: CKV_AWS_117
            comment: Lambda does not need to communicate with VPC resources.
          - id: CKV_AWS_173
            comment: Environment variables are not sensitive.
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref pCodeBuildProjectLambdaFunctionName
      Description: Start SRA codebuild project
      Architectures: !If
        - cUseGraviton
        - [arm64]
        - !Ref AWS::NoValue
      Handler: index.lambda_handler
      Role: !GetAtt rStartCodeBuildProjectLambdaRole.Arn
      Runtime: python3.9
      Timeout: 900
      Environment:
        Variables:
          LOG_LEVEL: !Ref pLambdaLogLevel
          CODE_BUILD_PROJECT_NAME: !Ref pCodeBuildProjectName
      Tags:
        - Key: sra-solution
          Value: !Ref pSRASolutionName
      Code:
        ZipFile: |
          # type: ignore
          """Custom Resource to start codebuild project.

          Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
          SPDX-License-Identifier: MIT-0
          """
          import logging
          import os

          import boto3
          import cfnresponse
          import time
          from botocore.exceptions import ClientError

          LOGGER = logging.getLogger(__name__)
          log_level: str = os.environ.get("LOG_LEVEL", "INFO")
          LOGGER.setLevel(log_level)
          CODE_BUILD_PROJECT_NAME: str = os.environ.get("CODE_BUILD_PROJECT_NAME")

          def start_build():
              """Start build job.

              Returns:
                  Response data for custom resource
              """
              management_account_session = boto3.Session()
              codebuild_client = management_account_session.client("codebuild")
              response = codebuild_client.start_build(projectName=CODE_BUILD_PROJECT_NAME)
              LOGGER.info({"API_Call": "codebuild:StartBuild", "API_Response": response})
              buildId = response["build"]["id"]
              return wait_for_build([buildId], codebuild_client)


          def wait_for_build(BuildId, client):
              buildWaitStatus = "FAILURE_WAIT_TIMEOUT"
              counter = 0
              while counter < 30:
                  time.sleep(10)
                  counter = counter + 1
                  buildStatus = get_build_status(BuildId, client)
                  if buildStatus == "SUCCEEDED":
                      buildWaitStatus = "SUCCESS"
                      break
                  elif buildStatus == "FAILED" or buildStatus == "FAULT" or buildStatus == "STOPPED" or buildStatus == "TIMED_OUT":
                      buildWaitStatus = "BUILD " + buildStatus + " (check codebuild project cloudwatch log group for details)"
                      break
              return buildWaitStatus


          def get_build_status(buildId, client):
              build = client.batch_get_builds(ids=buildId)
              return build["builds"][0]["buildStatus"]


          def create_event(event, context):
              try:
                  data = {"data": start_build()}
                  if data["data"] == "SUCCESS":
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, data, "CustomResourcePhysicalID")
                  else:
                      reason = f"See the details in CloudWatch Log Stream: '{context.log_group_name} and CloudFormation Events'"
                      cfnresponse.send(event, context, cfnresponse.FAILED, data, "CustomResourcePhysicalID")
              except Exception:
                  LOGGER.exception("Unexpected!")
                  reason = f"See the details in CloudWatch Log Stream: '{context.log_group_name}'"
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, "CustomResourcePhysicalID", reason=reason)
              return "CustomResourcePhysicalID"


          def delete_event(event, context):
              LOGGER.info("delete event, nothing to do")
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"delete_operation": f"succeeded deleting event"}, "CustomResourcePhysicalID")


          def lambda_handler(event, context):
              LOGGER.info(event)
              if event["RequestType"] == "Create":
                  LOGGER.info("CREATE EVENT!!")
                  create_event(event, context)
              if event["RequestType"] == "Update":
                  LOGGER.info("UPDATE EVENT!!")

              if event["RequestType"] == "Delete":
                  LOGGER.info("DELETE EVENT!!")
                  delete_event(event, context)
  
  rStartCodeBuildProjectLambdaLogGroup:
    DeletionPolicy: Retain
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${pCodeBuildProjectLambdaFunctionName}
      KmsKeyId: !If
        - cUsingKmsKey
        - !Ref pLambdaLogGroupKmsKey
        - !Ref AWS::NoValue
      RetentionInDays: !Ref pLambdaLogGroupRetention

  rStartCodeBuildProjectLambdaRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
    #       - id: W11
    #         reason: Allow * in resource when required
          - id: W28
            reason: The role name is defined to identify automation resources
    Properties:
      RoleName: !Ref pCodeBuildProjectLambdaRoleName
      Description: !Sub Role for '${pCodeBuildProjectLambdaRoleName}' Lambda function
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Tags:
        - Key: sra-solution
          Value: !Ref pSRASolutionName
      Policies:
        - PolicyName: codebuild-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: codebuildStartBuild
                Effect: Allow
                Action: 
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !GetAtt rCodeBuildProject.Arn
        - PolicyName: CloudWatchLogGroup-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${pCodeBuildProjectLambdaFunctionName}:log-stream:*
        - PolicyName: "lambda-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:DeleteFunction
                  - lambda:InvokeFunction
                Resource:
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:sra*"

  rCheckForResourceLambdaLogGroup:
    DeletionPolicy: Retain
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${pCheckForResourceLambdaFunctionName}
      KmsKeyId: !If
        - cUsingKmsKey
        - !Ref pLambdaLogGroupKmsKey
        - !Ref AWS::NoValue
      RetentionInDays: !Ref pLambdaLogGroupRetention

  rCheckForResourceLambdaRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Allow * in resource when required
          - id: W28
            reason: The role name is defined to identify automation resources
    Properties:
      RoleName: !Ref pCheckForResourceLambdaRoleName
      Description: !Sub Role for '${pCheckForResourceLambdaRoleName}' Lambda function
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: cloudformation-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: cloudformationaccess
                Effect: Allow
                Action: 
                  - cloudformation:ListStacks
                  - cloudformation:*
                Resource: '*'
        - PolicyName: CloudWatchLogGroup-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${pCheckForResourceLambdaFunctionName}:log-stream:*
        - PolicyName: "s3-helper-bucket-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:GetBucketAcl
                  - s3:GetBucketPolicy
                  - s3:GetObjectAcl
                  - s3:PutObjectAcl
                  - s3:DeleteBucket
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                  - s3:GetBucketVersioning
                  - s3:DeleteBucketPolicy
                  - s3:ListBucketVersions
                  - s3:PutBucketVersioning
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${pSRAHelperBucketNamePrefix}-${AWS::AccountId}-${AWS::Region}"
                  - !Sub "arn:${AWS::Partition}:s3:::${pSRAHelperBucketNamePrefix}-${AWS::AccountId}-${AWS::Region}/*"
        - PolicyName: "s3-create-bucket-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:CreateBucket
                  - s3:PutBucketAcl
                  - s3:PutBucketObjectLockConfiguration
                  - s3:PutBucketVersioning
                  - s3:PutBucketOwnershipControls
                  - s3:PutBucketPublicAccessBlock
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::*"

      Tags:
        - Key: sra-solution
          Value: !Ref pSRASolutionName

  rGuardDutySolutionStack:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    DependsOn: rStartCodeBuildProjectCustomResource
    Properties:
      TemplateURL: !Sub https://${pSRAHelperBucketNamePrefix}-${AWS::AccountId}-${AWS::Region}.s3.${AWS::Region}.${AWS::URLSuffix}/modules/guardduty-org/sra-guardduty-org-solution.yaml
      Parameters:
        pAutoEnableS3Logs: !Ref pAutoEnableS3Logs
        pAutoEnableKubernetesAuditLogs: !Ref pAutoEnableKubernetesAuditLogs
        pAutoEnableMalwareProtection: !Ref pAutoEnableMalwareProtection
        pEnableRdsLoginEvents: !Ref pEnableRdsLoginEvents
        pEnableEksRuntimeMonitoring: !Ref pEnableEksRuntimeMonitoring
        pEnableEksAddonManagement: !Ref pEnableEksAddonManagement
        pEnableLambdaNetworkLogs: !Ref pEnableLambdaNetworkLogs
        pCreateLambdaLogGroup: !Ref pCreateLambdaLogGroup
        pDisableGuardDuty: !Ref pDisableGuardDuty
        pGuardDutyFindingPublishingFrequency: !Ref pGuardDutyFindingPublishingFrequency
        pGuardDutyOrgDeliveryBucketPrefix: !Ref pGuardDutyOrgDeliveryBucketPrefix
        pGuardDutyOrgDeliveryKeyAlias: !Ref pGuardDutyOrgDeliveryKeyAlias
        pLambdaLogGroupKmsKey: !Ref pLambdaLogGroupKmsKey
        pLambdaLogGroupRetention: !Ref pLambdaLogGroupRetention
        pLambdaLogLevel: !Ref pLambdaLogLevel
        pSRAAlarmEmail: !Ref pSRAAlarmEmail
        pCommonPrerequisitesInstalled: !GetAtt rCheckForResourceCustomResource.sra-common-prerequisites-installed

# Outputs:
#   oSraCommonPrerequisitesInstalled:
#     Description: SRA common prerequisites solution installed true or false
#     Value: !GetAtt rCheckForResourceCustomResource.sra-common-prerequisites-installed
#     Export:
#       Name: eSraCommonPrerequisitesInstalled
#   oSraCommonPrerequisitesStackName:
#     Description: SRA common prerequisites solution CloudFormation stack name
#     Value: !GetAtt rCheckForResourceCustomResource.sra-common-prerequisite-stack-name
#     Export:
#       Name: eSraCommonPrerequisitesStackName
#   oSraCommonPrerequisitesStackStatus:
#     Description: SRA common prerequisites solution CloudFormation stack status
#     Value: !GetAtt rCheckForResourceCustomResource.sra-common-prerequisite-stack-status
#     Export:
#       Name: eSraCommonPrerequisitesStackStatus