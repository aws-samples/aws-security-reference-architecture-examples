{
  "sra-bedrock-filter-service-changes": "{ $.eventSource = \"bedrock.amazonaws.com\" && ($.eventName = \"BatchDeleteEvaluationJob\" || $.eventName = \"CreateEvaluationJob\" || $.eventName = \"CreateGuardrail\" || $.eventName = \"CreateGuardrailVersion\" || $.eventName = \"CreateModelCopyJob\" || $.eventName = \"CreateModelCustomizationJob\" || $.eventName = \"CreateModelImportJob\" || $.eventName = \"CreateModelInvocationJob\" || $.eventName = \"CreateProvisionedModelThroughput\" || $.eventName = \"DeleteCustomModel\" || $.eventName = \"DeleteGuardrail\" || $.eventName = \"DeleteImportedModel\" || $.eventName = \"DeleteModelInvocationLoggingConfiguration\" || $.eventName = \"DeleteProvisionedModelThroughput\" || $.eventName = \"PutModelInvocationLoggingConfiguration\" || $.eventName = \"TagResource\" || $.eventName = \"UntagResource\" || $.eventName = \"UpdateGuardrail\" || $.eventName = \"UpdateProvisionedModelThroughput\") }",
  "sra-bedrock-filter-bucket-changes": "{ $.eventSource = \"s3.amazonaws.com\" && ($.eventName = \"DeleteBucket*\" || ($.eventName = \"PutBucket*\" && $.eventName != \"PutBucketNotification\") || $.eventName = \"DeleteObjectTagging\" || $.eventName = \"PutObjectAcl\" || $.eventName = \"PutObjectLegalHold\" || $.eventName = \"PutObjectRetention\" || $.eventName = \"PutObjectTagging\" || $.eventName = \"*PublicAccessBlock\") && $.eventName != \"CreateBucket\" && ($.requestParameters.bucketName = \"<BUCKET_NAME_PLACEHOLDER>\") }",
  "sra-bedrock-filter-prompt-injection": "{ $.schemaType = \"ModelInvocationLog\" && $.operation = \"InvokeModel\" && ($.<INPUT_PATH> = *ignore* || $.<INPUT_PATH> = *disregard* || $.<INPUT_PATH> = *you are now* || $.<INPUT_PATH> = *forget* || $.<INPUT_PATH> = *new task* || $.<INPUT_PATH> = *override* || $.<INPUT_PATH> = *bypass* || $.<INPUT_PATH> = *don't follow* || $.<INPUT_PATH> = *pretend* || $.<INPUT_PATH> = *no longer have to* || $.<INPUT_PATH> = *core values* || $.<INPUT_PATH> = *act as if* || $.<INPUT_PATH> = *prime directive* || $.<INPUT_PATH> = *from now on* || $.<INPUT_PATH> = *free from* || $.<INPUT_PATH> = *new purpose* || $.<INPUT_PATH> = *unrestricted*) }"
}
