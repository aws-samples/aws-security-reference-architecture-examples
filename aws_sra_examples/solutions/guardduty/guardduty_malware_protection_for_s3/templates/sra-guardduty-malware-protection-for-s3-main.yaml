AWSTemplateFormatVersion: 2010-09-09
Description: This template creates IAM PassRole and Policy for GuardDuty Malware
  Protection for S3 - 's3_malware_protection' solution in the repo,
  https://github.com/aws-samples/aws-security-reference-architecture-examples
  (sra-1u3sd7f8o)
Metadata:
  SRA:
    Version: 1
    Entry: Parameters for deploying the solution
    Order: 1
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Properties
        Parameters:
          - pSRASolutionName
      - Label:
          default: Existing S3 Malware Protected Bucket Properties
        Parameters:
          - pUseExistingBucket
          - pExistingBucketName
          - pExistingBucketKmsKey
      - Label:
          default: New S3 Malware Protected Bucket Properties
        Parameters:
          - pCreateNewBucket
          - pS3MalwareProtectedBucketNamePrefix
          - pS3AccessLogsBucket
          - pKmsKeyAlias
      - Label:
          default: EventBridge Properties
        Parameters:
          - pEventRuleRoleName
      - Label:
          default: Notification Properties
        Parameters:
          - pSRAAlarmEmail
    ParameterLabels:
      pEventRuleRoleName:
        default: Event Rule Role Name
      pExistingBucketKmsKey:
        default: Existing S3 KMS Key ARN
      pExistingBucketName:
        default: Existing S3 Bucket Name
      pKmsKeyAlias:
        default: KMS Key Alias
      pS3AccessLogsBucket:
        default: S3 Access Logs Bucket Name
      pS3MalwareProtectedBucketNamePrefix:
        default: S3 Malware Protected Bucket Name Prefix
      pSRAAlarmEmail:
        default: (Optional) SRA Alarm Email
      pSRASolutionName:
        default: SRA Solution Name
      pUseExistingBucket:
        default: Use Existing S3 Bucket

Parameters:
  pCreateNewBucket:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Create a new S3 bucket
    Type: String
  pEventRuleRoleName:
    AllowedPattern: ^[\w+=,.@-]{1,64}$
    ConstraintDescription: Max 64 alphanumeric characters. Also special characters supported [+, =, ., @, -].
    Default: sra-guardduty-malware-protection-for-s3-events
    Description: Event rule role name
    Type: String
  pExistingBucketKmsKey:
    AllowedPattern: ^$|^arn:(aws[a-zA-Z-]*){1}:kms:[a-z0-9-]+:\d{12}:key\/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
    ConstraintDescription: "Key ARN example:  arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    Default: ''
    Description: (Optional) Existing S3 KMS key ARN for existing S3 bucket
    Type: String
  pExistingBucketName:
    AllowedPattern: ^$|^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: ''
    Description: (Optional) Existing S3 bucket name for malware protection.
    Type: String
  pKmsKeyAlias:
    AllowedPattern: ^[a-zA-Z0-9/_-]+$
    ConstraintDescription: The alias must be string of 1-256 characters. It can contain only alphanumeric characters, forward slashes (/), underscores (_), and dashes (-).
    Default: sra-guardduty-malware-protection-for-s3-key
    Description: KMS Key Alias
    Type: String
  pS3AccessLogsBucket:
    AllowedPattern: ^$|^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: ''
    Description: (Optional) S3 bucket name for the S3 Server Access Logs
    Type: String
  pS3MalwareProtectedBucketNamePrefix:
    AllowedPattern: ^$|^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: S3 bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: sra-protected-bucket
    Description: S3 Malware Protected Bucket Name Prefix
    Type: String
  pSRAAlarmEmail:
    AllowedPattern: ^$|^([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)$
    ConstraintDescription: Must be a valid email address.
    Default: ''
    Description: Email address for receiving SRA alarms
    Type: String
  pSRASolutionName:
    AllowedValues:
      - sra-guardduty-malware-protection-for-s3
    Default: sra-guardduty-malware-protection-for-s3
    Description: The SRA solution name. The default value is the folder name of the solution
    Type: String
  pUseExistingBucket:
    AllowedValues: ['true', 'false']
    Default: 'false'
    Description: Use an existing S3 bucket for malware protection
    Type: String

Rules:
  MutuallyExclusiveNewBucketSelection:
    RuleCondition: !Equals [!Ref pCreateNewBucket, 'true']
    Assertions:
      - Assert: !Not [!Equals [!Ref pUseExistingBucket, 'true']]
        AssertDescription: Cannot select both new bucket and existing bucket creation options
  MutuallyExclusiveExistingBucketSelection:
    RuleCondition: !Equals [!Ref pCreateNewBucket, 'false']
    Assertions:
      - Assert: !Not [!Equals [!Ref pUseExistingBucket, 'false']]
        AssertDescription: Must select either new bucket or existing bucket creation option
  ExistingBucketNameValidation:
    RuleCondition: !Equals [!Ref pUseExistingBucket, 'true']
    Assertions:
      - Assert: !Not [!Equals [!Ref pExistingBucketName, '']]
        AssertDescription: Existing bucket name is required when using an existing bucket
  EmailAddressValidation:
    RuleCondition: !Equals [!Ref pSRAAlarmEmail, '']
    Assertions:
      - Assert: !Not [!Equals [!Ref pSRAAlarmEmail, '']]
        AssertDescription: Must provide a valid email address

Conditions:
  cCreateNewBucket: !Equals
    - !Ref pCreateNewBucket
    - 'true'
  cExistingBucket: !Not [!Equals [!Ref pExistingBucketName, '']]
  cExistingKmsKey: !Not [!Equals [!Ref pExistingBucketKmsKey, '']]
  cEnableAccessLogging: !Not [!Equals [!Ref pS3AccessLogsBucket, '']]

Resources:
  rKMSKeyForBucket:
    Type: AWS::KMS::Key
    Condition: cCreateNewBucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
          Action:
            - kms:*
          Resource: '*'
      Tags:
        - Key: sra-solution
          Value: !Ref pSRASolutionName

  rKeyAlias:
    Type: AWS::KMS::Alias
    Condition: cCreateNewBucket
    Properties:
      AliasName: !Sub alias/${pKmsKeyAlias}-${AWS::AccountId}-${AWS::Region}
      TargetKeyId: !Ref rKMSKeyForBucket

  rGuardDutyMalwareProtectedBucket:
    Type: AWS::S3::Bucket
    Condition: cCreateNewBucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: S3 access logging is not enabled.
      checkov:
        skip:
          - id: CKV_AWS_18
            comment: S3 access logging is not enabled.
    Properties:
      BucketName: !Sub ${pS3MalwareProtectedBucketNamePrefix}-${AWS::AccountId}-${AWS::Region}
      LoggingConfiguration:
        !If 
          - cEnableAccessLogging
          - DestinationBucketName: !Ref pS3AccessLogsBucket
            LogFilePrefix: !Sub ${pSRASolutionName}-logs/
          - !Ref AWS::NoValue
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt rKMSKeyForBucket.Arn
              SSEAlgorithm: aws:kms
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      Tags:
        - Key: sra-solution
          Value: !Ref pSRASolutionName

  rEventRuleRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Specific role name provided
    Properties:
      RoleName: !Sub ${pEventRuleRoleName}-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - events.amazonaws.com
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      Policies:
        - PolicyName: sra-guardduty-malware-protection-for-s3-events
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !GetAtt rGuardDutyMalwareProtectionForS3AlarmTopic.TopicArn
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt rGuardDutyMalwareProtectionForS3RuleDLQ.Arn
      Tags:
        - Key: sra-solution
          Value: !Ref pSRASolutionName

  rGuardDutyMalwareProtectionForS3RuleDLQ:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: alias/aws/sqs
      QueueName: !Sub ${pSRASolutionName}-dlq
      Tags:
        - Key: sra-solution
          Value: !Ref pSRASolutionName
      MessageRetentionPeriod: 345600
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  rGuardDutyMalwareProtectionForS3RuleDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref rGuardDutyMalwareProtectionForS3RuleDLQ
      PolicyDocument:
        Statement:
          - Action: SQS:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn:
                  - !GetAtt rGuardDutyMalwareProtectionForS3EventRule.Arn
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource:
              - !GetAtt rGuardDutyMalwareProtectionForS3EventRule.Arn

  rGuardDutyMalwareProtectionForS3EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: GuardDuty Copy S3 Object Rule for source bucket
      EventBusName: default
      Name: !Sub ${pSRASolutionName}-${AWS::Region}-event
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Malware Protection Object Scan Result
        detail:
          scanStatus:
            - COMPLETED
          resourceType:
            - S3_OBJECT
          s3ObjectDetails:
            bucketName: 
              - !If
                - cExistingBucket
                - !Ref pExistingBucketName
                - !Sub ${pS3MalwareProtectedBucketNamePrefix}-${AWS::AccountId}-${AWS::Region}
          scanResultDetails:
            scanResultStatus:
              - THREATS_FOUND
              - FAILED
              - ACCESS_DENIED
      State: ENABLED
      Targets:
        - Arn: !GetAtt rGuardDutyMalwareProtectionForS3AlarmTopic.TopicArn
          Id: !GetAtt rGuardDutyMalwareProtectionForS3AlarmTopic.DisplayName
          DeadLetterConfig:
            Arn: !GetAtt rGuardDutyMalwareProtectionForS3RuleDLQ.Arn
          RetryPolicy:
            MaximumEventAgeInSeconds: 86400 # 24 hours
            MaximumRetryAttempts: 185
          RoleArn: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${pEventRuleRoleName}-${AWS::Region}

  rGuardDutyMalwareProtectionForS3IamPolicy:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: Delete
    Properties:
      Description: Policy for allowing GuardDuty S3 malware protection to access the
        required services
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowManagedRuleToSendS3EventsToGuardDuty
            Effect: Allow
            Action:
              - events:PutRule
              - events:DeleteRule
              - events:PutTargets
              - events:RemoveTargets
            Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*
            Condition:
              StringLike:
                events:ManagedBy: malware-protection-plan.guardduty.amazonaws.com
          - Sid: AllowGuardDutyToMonitorEventBridgeManagedRule
            Effect: Allow
            Action:
              - events:DescribeRule
              - events:ListTargetsByRule
            Resource:
              - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*
          - Sid: AllowPostScanTag
            Effect: Allow
            Action:
              - S3:PutObjectTagging
              - S3:GetObjectTagging
              - S3:PutObjectVersionTagging
              - S3:GetObjectVersionTagging
            Resource: !If
              - cExistingBucket
              - !Sub arn:${AWS::Partition}:s3:::${pExistingBucketName}/*
              - !Sub arn:${AWS::Partition}:s3:::${pS3MalwareProtectedBucketNamePrefix}-${AWS::AccountId}-${AWS::Region}/*
          - Sid: AllowEnableS3EventBridgeEvents
            Effect: Allow
            Action:
              - s3:PutBucketNotification
              - s3:GetBucketNotification
            Resource: !If
              - cExistingBucket
              - !Sub arn:${AWS::Partition}:s3:::${pExistingBucketName}
              - !Sub arn:${AWS::Partition}:s3:::${pS3MalwareProtectedBucketNamePrefix}-${AWS::AccountId}-${AWS::Region}
          - Sid: AllowPutValidationObject
            Effect: Allow
            Action:
              - s3:PutObject
            Resource: !If
              - cExistingBucket
              - !Sub arn:${AWS::Partition}:s3:::${pExistingBucketName}/malware-protection-resource-validation-object
              - !Sub arn:${AWS::Partition}:s3:::${pS3MalwareProtectedBucketNamePrefix}-${AWS::AccountId}-${AWS::Region}/malware-protection-resource-validation-object
          - Sid: AllowCheckBucketOwnership
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource: !If
              - cExistingBucket
              - !Sub arn:${AWS::Partition}:s3:::${pExistingBucketName}
              - !Sub arn:${AWS::Partition}:s3:::${pS3MalwareProtectedBucketNamePrefix}-${AWS::AccountId}-${AWS::Region}
          - Sid: AllowMalwareScan
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !If
              - cExistingBucket
              - !Sub arn:${AWS::Partition}:s3:::${pExistingBucketName}/*
              - !Sub arn:${AWS::Partition}:s3:::${pS3MalwareProtectedBucketNamePrefix}-${AWS::AccountId}-${AWS::Region}/*
          - !If
            - cExistingKmsKey
            - Sid: AllowDecryptForExistingBucket
              Effect: Allow
              Action: 
                - kms:Decrypt
                - kms:GenerateDataKey
              Resource: !Ref pExistingBucketKmsKey
              Condition:
                StringLike:
                  kms:ViaService: s3.*.amazonaws.com
            - !Ref AWS::NoValue
          - !If
            - cCreateNewBucket
            - Sid: AllowDecryptForMalwareScan
              Effect: Allow
              Action:
                - kms:GenerateDataKey
                - kms:Decrypt
              Resource:
              - !GetAtt rKMSKeyForBucket.Arn
              Condition:
                StringLike:
                  kms:ViaService: s3.*.amazonaws.com
            - !Ref AWS::NoValue

  rGuardDutyMalwareProtectionForS3IamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pSRASolutionName}-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: malware-protection-plan.guardduty.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Sub ${rGuardDutyMalwareProtectionForS3IamPolicy.PolicyArn}
      Tags:
        - Key: sra-solution
          Value: !Ref pSRASolutionName

  rGuardDutyMalwareProtectionForS3:
    Type: AWS::GuardDuty::MalwareProtectionPlan
    Properties:
      Actions:
        Tagging:
          Status: ENABLED
      ProtectedResource:
        S3Bucket: 
          BucketName: !If
            - cExistingBucket
            - !Ref pExistingBucketName
            - !Sub ${pS3MalwareProtectedBucketNamePrefix}-${AWS::AccountId}-${AWS::Region}
      Role: !GetAtt rGuardDutyMalwareProtectionForS3IamRole.Arn
      Tags:
        - Key: sra-solution
          Value: !Ref pSRASolutionName

  rGuardDutyMalwareProtectionForS3AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${pSRASolutionName}-alarm
      KmsMasterKeyId: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/sns
      TopicName: !Sub ${pSRASolutionName}-alarm-${AWS::Region}
      Subscription:
        - Endpoint: !Ref pSRAAlarmEmail
          Protocol: email
      Tags:
        - Key: sra-solution
          Value: !Ref pSRASolutionName

Outputs:
  GuardDutyS3MalwareProtectionPlanArn:
    Description: Amazon Resource Name (ARN) associated with this Malware Protection plan
    Value: !GetAtt rGuardDutyMalwareProtectionForS3.Arn

  GuardDutyS3MalwareProtectionPlanId:
    Description: A unique identifier associated with Malware Protection plan
    Value: !GetAtt rGuardDutyMalwareProtectionForS3.MalwareProtectionPlanId

  S3MalwareProtectionRole:
    Description: IAM role created for S3 Malware Protection
    Value: !Ref rGuardDutyMalwareProtectionForS3IamRole

  SourceBucketArn:
    Condition: cCreateNewBucket
    Description: The bucket arn which has been created and enabled for S3 Malware protection
    Value: !GetAtt rGuardDutyMalwareProtectedBucket.Arn